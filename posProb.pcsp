//@@Model Name@@
#include "smart_contract.csp";

var cblocks[3][2];
// 3 candicate blocks with vote as 0, miner unknown
var nodes = [7,10,13]; // 3 nodes with wealth
var vote_stats[3][3]; // row index is the voter, col is the candicate block, cell value is the vote count
var totalwealth = 30;
channel c 0; //or channel c 1; 1 is buffer, 0 is sync, 1 is async
channel votechannel 0; // channel to broad case any vote
var defaultReward = 1;//simplify the mining award for getting block selected
var curBlock = -1;
var winning_vote_threshold = 15;
var winning_block = -1;


//InitCBlock = a{ i:{0..2}@cblocks[i][0]=0;cblocks[i][1]=-1;} -> Skip
Mine = if(curBlock < 2) {
		increaseBlockCount{ curBlock++ } -> pcase {
			nodes[0]: setBlock{ cblocks[curBlock][1]=0 } ->  c!cblocks[curBlock][1].curBlock -> Mine 
			nodes[1]: setBlock{ cblocks[curBlock][1]=1 } ->  c!cblocks[curBlock][1].curBlock  -> Mine
			nodes[2]: setBlock{ cblocks[curBlock][1]=2 } -> c!cblocks[curBlock][1].curBlock  -> Mine
		}
	} else { Skip };



NodeSub(x) =  c?miner.block -> VoteWithProb(block,x) ; NodeSub(x) ;
//Broadcast = blockChannel!cblocks[curBlock][1] -> Mind;

//P = Mine || Node1 || Node2;
//#assert P deadlockfree;

VoteForBlock(block, mynode) = [nodes[mynode] > 0]votefor.block{ cblocks[block][0] = cblocks[block][0] + nodes[mynode]; vote_stats[mynode][block]=nodes[mynode]; nodes[mynode]=0; } -> votechannel!mynode.block -> Skip;
VoteWithProb(block, mynode) = // if(cblocks[block][1] == mynode) { VoteForBlock(block, mynode) } else {
pcase {
	cblocks[block][0]: VoteForBlock(block, mynode) 
	10: 				VoteForBlock(block, mynode)  // random prob to vote
	totalwealth - cblocks[block][0] : NodeSub(mynode)
};
// };

//BroadCastVote(voter,block) = votechannel!voter.block -> Skip;
SubscribeVote(x) = votechannel?voter.block -> VoteWithProb(block,x) ; SubscribeVote(x);

Concensus = votechannel?voter.block -> if(cblocks[block][0] > winning_vote_threshold){ giverewards{
		winning_block = block;
		var miner = cblocks[block][1];
		var totalVotes = cblocks[block][0];
		nodes[miner] = nodes[miner] + defaultReward;
		var voter_idx = 0;
		while(voter_idx < 3) {
			if(vote_stats[voter_idx][block] == 0) {nodes[voter_idx]=0}//punish for not vote
			else{
				nodes[voter_idx]= vote_stats[voter_idx][block]/totalVotes * totalwealth + nodes[voter_idx];};
			voter_idx = voter_idx + 1;
		}

	} -> CheckAndAddBatch }
	else { Concensus };
	
P =  Mine ||| (|||x:{0..2}@NodeSub(x)) ||| (|||x:{0..2}@SubscribeVote(x)) ||| Concensus;

#define goal (winning_block == 1);
#assert P reaches goal with prob;