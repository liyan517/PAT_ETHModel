//smart contract

var currentDate=20190324;
//batch: batch id 0, temperature 1, expiryDate 2, fault 3 (404 means invalid), node id 4, fridge id 5, used 6
var batch[10][6]; // 10 batches with 6 attributes
var FridgeTempHist[5][2];
//vial: vial id 0, batch id 1, fridge id 2, used 3,user id 4, valid 5(value 666 means valid)
var vial[20][6];
//user: user id, vial id, vaccined
var user[6][3];
var batchID=10001;
var querySuccess=0;

AddBatch(id) = add{batch[id][0]=batchID;batch[batchID][1]=2;batch[batchID][2]=20191122;batch[batchID][5]=13;batchID++;} -> Skip;
UseBatch(id) = {if (batch[id][0]==id) 
				{batch[id][6]=1} 
				} -> Skip;
ExpireBatch(id) = {batch[id][2]=19000101;batch[id][3]=404;}->Skip;
QueryBatch(id) = { if(batch[id][0]!=0)
					{querySuccess=1;}
					} -> Skip;



InitUser = {user[0][0]=101;user[0][2]=1;user[1][0]=102;user[2][0]=103;}->Skip;

InitVial = {vial[0][0]=11;vial[0][1]=5;vial[0][2]=1;
				vial[1][0]=22;vial[1][1]=4;vial[1][2]=3;
				vial[2][0]=33;vial[2][1]=3;vial[2][2]=11;
				vial[3][0]=44;vial[3][1]=2;vial[3][2]=12;
				vial[4][0]=55;vial[4][1]=5;vial[4][2]=13;
				vial[5][0]=66;vial[5][1]=1;vial[5][2]=13;}->Skip;


InitBatch = {batch[0][0]=1;batch[0][1]=-4;batch[0][2]=20200819;batch[0][5]=1;
				batch[1][0]=2;batch[1][1]=-20;batch[1][2]=20200819;batch[1][5]=3;
				batch[2][0]=3;batch[2][1]=5;batch[2][2]=20101122;batch[2][5]=11;
				batch[3][0]=4;batch[3][1]=5;batch[3][2]=20191122;batch[3][5]=12;
				batch[4][0]=5;batch[4][1]=2;batch[4][2]=20191122;batch[4][5]=13;}->Skip;

//batch starts
VerifyBatch = {var curBatch=0;
				while(curBatch<5){
				if ((batch[curBatch][2]<=currentDate) || (batch[curBatch][1]>=10) || (batch[curBatch][1]<=-10) )
					{batch[curBatch][3]=404 }
				else {FridgeTempHist[curBatch][0]=batch[curBatch][5];FridgeTempHist[curBatch][1]=batch[curBatch][1]};
				curBatch++;
				}
}-> Skip;

CheckAndAddBatch = InitBatch;VerifyBatch;
//batch ends

//vial starts
MarkUsableVial = {var curVial=0;
				  while(curVial<6) { 
									var curBatch=0;
									while(curBatch<5){
										if(vial[curVial][1]==batch[curBatch][0] && batch[curBatch][3]!=404) 
											{vial[curVial][5]=666 }
										else {vial[curVial][5]=0 };
										curBatch++;
										}
									curVial++}}->Skip; //Stop will cause deadlock

LoadUsableVial = CheckAndAddBatch;InitVial;MarkUsableVial;
//vial ends

//vaccine starts
GetVaccined = {var curUser=0;
				while(curUser<3){
								var curVial=0;
								while(curVial<6){
												if(user[curUser][2]!=1 && vial[curVial][5]==1 && vial[curVial][3]==0)
													{user[curUser][1]=vial[curVial][0];user[curUser][2]=1;
													 vial[curVial][3]=1;vial[curVial][5]=0;vial[curVial][4]=user[curUser][0];}
												else {user[curUser][2]=0};
												curVial++;
												}
								curUser++;
								}
				}->Skip;
												
UseVaccine = InitUser;LoadUsableVial ; GetVaccined;
//vaccine ends

#assert CheckAndAddBatch deadlockfree;
#assert LoadUsableVial deadlockfree;
#assert UseVaccine deadlockfree;
#assert UseVaccine divergencefree;
#assert UseVaccine deterministic;
#assert UseVaccine nonterminating;

//goal is to check if any batch has fault, ie. temp not right or expired
#define goal0 ((batch[0][3]==404) || (batch[1][3]==404)|| (batch[2][3]==404)|| (batch[3][3]==404)|| (batch[4][3]==404));
#assert CheckAndAddBatch reaches goal0;
//goal1 is to check there is usable vial
#define goal1 ((vial[0][5]==666)||(vial[1][5]==666)||(vial[2][5]==666)||(vial[3][5]==666)||(vial[4][5]==666)||(vial[5][5]==666) );
#assert LoadUsableVial reaches goal1;
//goal2 is to check all 3 users get vaccination (only 2 vials are valid, so not reaching goal2)
#define goal2 ((user[0][2]==1)&&(user[1][2]==1)&&(user[2][2]==1));
#assert UseVaccine reaches goal2;

//#assert UseVaccine |= []<> AddBatch(0);
#assert LoadUsableVial refines UseVaccine; //all traces of  LoadUsableVial must be allowed by UseVaccine
#assert UseVaccine refines LoadUsableVial;
#assert UseVaccine refines CheckAndAddBatch;